{"ast":null,"code":"/**\r\n * データ処理ユーティリティ\r\n * 既存のPythonシステムとの連携を考慮\r\n */\n\n/**\r\n * 価格文字列から数値を抽出\r\n * @param {string} priceStr - \"659.9万円\" 形式の文字列\r\n * @returns {number|null} 数値または null\r\n */\nexport const parsePrice = priceStr => {\n  if (!priceStr) return null;\n  const match = priceStr.match(/([0-9.]+)万円/);\n  return match ? parseFloat(match[1]) : null;\n};\n\n/**\r\n * 年式文字列から年を抽出\r\n * @param {string} yearStr - \"2019(R01)\" 形式の文字列\r\n * @returns {number|null} 年または null\r\n */\nexport const parseYear = yearStr => {\n  if (!yearStr) return null;\n  const match = yearStr.match(/(\\d{4})/);\n  return match ? parseInt(match[1]) : null;\n};\n\n/**\r\n * 走行距離文字列から数値を抽出（km単位）\r\n * @param {string} mileageStr - \"5.3万km\" 形式の文字列\r\n * @returns {number|null} 走行距離（km）または null\r\n */\nexport const parseMileage = mileageStr => {\n  if (!mileageStr) return null;\n  if (mileageStr.includes('万km')) {\n    const match = mileageStr.match(/([0-9.]+)万km/);\n    return match ? parseFloat(match[1]) * 10000 : null;\n  } else if (mileageStr.includes('km')) {\n    const match = mileageStr.match(/([0-9.]+)km/);\n    return match ? parseFloat(match[1]) : null;\n  }\n  return null;\n};\n\n/**\r\n * 排気量文字列から数値を抽出\r\n * @param {string} displacementStr - \"5000CC\" 形式の文字列\r\n * @returns {number|null} 排気量（CC）または null\r\n */\nexport const parseDisplacement = displacementStr => {\n  if (!displacementStr) return null;\n  const match = displacementStr.match(/(\\d+)CC/);\n  return match ? parseInt(match[1]) : null;\n};\n\n/**\r\n * CSVデータを分析用に変換\r\n * @param {Array} rawData - CSVから読み込んだ生データ\r\n * @returns {Array} 変換済みデータ\r\n */\nexport const processCarData = rawData => {\n  return rawData.map((row, index) => {\n    const price = parsePrice(row.支払総額);\n    const year = parseYear(row.年式);\n    const mileage = parseMileage(row.走行距離);\n    const displacement = parseDisplacement(row.排気量);\n\n    // 正規グレードが存在しない場合は元グレードを使用\n    const normalizedGrade = row.正規グレード || row.グレード || '';\n\n    // 日付の処理\n    let date = row.取得日時;\n    if (!date) {\n      // フォールバック: ランダムな日付を生成\n      const randomMonth = Math.floor(Math.random() * 12) + 1;\n      const randomDay = Math.floor(Math.random() * 28) + 1;\n      date = `2024-${String(randomMonth).padStart(2, '0')}-${String(randomDay).padStart(2, '0')}`;\n    }\n    return {\n      id: index,\n      車種名: row.車種名 || 'Unknown',\n      元グレード: row.グレード || '',\n      正規グレード: normalizedGrade,\n      支払総額: row.支払総額 || '',\n      price: price,\n      年式: row.年式 || '',\n      year: year,\n      走行距離: row.走行距離 || '',\n      mileage: mileage,\n      修復歴: row.修復歴 || 'なし',\n      ミッション: row.ミッション || '',\n      排気量: row.排気量 || '',\n      displacement: displacement,\n      マッチング精度: parseFloat(row.マッチング精度) || 0.8,\n      取得日時: row.取得日時 || '',\n      date: date,\n      // 追加の分析用フィールド\n      pricePerCC: price && displacement ? price * 10000 / displacement : null,\n      ageInYears: year ? new Date().getFullYear() - year : null,\n      mileagePerYear: year && mileage ? mileage / Math.max(1, new Date().getFullYear() - year) : null\n    };\n  }).filter(item =>\n  // 必須フィールドが存在するデータのみ\n  item.price !== null && item.year !== null && item.mileage !== null);\n};\n\n/**\r\n * グレード名の正規化（簡易版）\r\n * @param {string} gradeName - 元のグレード名\r\n * @returns {string} 正規化されたグレード名\r\n */\nexport const normalizeGradeName = gradeName => {\n  if (!gradeName) return 'ベース';\n\n  // RC Fの特殊パターン\n  const rcfPatterns = [{\n    pattern: /RC\\s+カーボンエクステリアパッケージ/i,\n    normalized: 'カーボンエクステリア'\n  }, {\n    pattern: /RC\\s+パフォーマンスパッケージ/i,\n    normalized: 'パフォーマンス'\n  }, {\n    pattern: /RC\\s+F\\s+10th\\s+アニバーサリー/i,\n    normalized: '10th アニバーサリー'\n  }, {\n    pattern: /RC\\s+ファイナル\\s+エディション/i,\n    normalized: 'ファイナル エディション'\n  }, {\n    pattern: /RC\\s+エモーショナル\\s+ツーリング/i,\n    normalized: 'エモーショナル ツーリング'\n  }, {\n    pattern: /RC\\s+5\\.0/i,\n    normalized: '5.0'\n  }];\n  for (const {\n    pattern,\n    normalized\n  } of rcfPatterns) {\n    if (pattern.test(gradeName)) {\n      return normalized;\n    }\n  }\n\n  // 一般的なパターン\n  const cleaned = gradeName.replace(/^RC\\s+/i, '').replace(/[（）\\(\\)\\[\\]【】]/g, '').trim();\n  return cleaned || 'ベース';\n};\n\n/**\r\n * 価格統計の計算\r\n * @param {Array} prices - 価格の配列\r\n * @returns {Object} 統計情報\r\n */\nexport const calculatePriceStats = prices => {\n  if (!prices || prices.length === 0) {\n    return {\n      mean: 0,\n      min: 0,\n      max: 0,\n      median: 0,\n      count: 0\n    };\n  }\n  const validPrices = prices.filter(p => p !== null && !isNaN(p));\n  if (validPrices.length === 0) {\n    return {\n      mean: 0,\n      min: 0,\n      max: 0,\n      median: 0,\n      count: 0\n    };\n  }\n  const sorted = [...validPrices].sort((a, b) => a - b);\n  const mean = validPrices.reduce((sum, p) => sum + p, 0) / validPrices.length;\n  const median = sorted.length % 2 === 0 ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2 : sorted[Math.floor(sorted.length / 2)];\n  return {\n    mean: Math.round(mean * 10) / 10,\n    min: Math.min(...validPrices),\n    max: Math.max(...validPrices),\n    median: Math.round(median * 10) / 10,\n    count: validPrices.length\n  };\n};\n\n/**\r\n * データをCSV形式でエクスポート\r\n * @param {Array} data - エクスポートするデータ\r\n * @param {string} filename - ファイル名\r\n */\nexport const exportToCSV = (data, filename = 'car_analysis_export.csv') => {\n  if (!data || data.length === 0) return;\n  const headers = Object.keys(data[0]);\n  const csvContent = [headers.join(','), ...data.map(row => headers.map(header => {\n    const value = row[header];\n    // カンマやダブルクォートを含む場合はエスケープ\n    if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\n      return `\"${value.replace(/\"/g, '\"\"')}\"`;\n    }\n    return value;\n  }).join(','))].join('\\n');\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;'\n  });\n  const link = document.createElement('a');\n  const url = URL.createObjectURL(blob);\n  link.setAttribute('href', url);\n  link.setAttribute('download', filename);\n  link.style.visibility = 'hidden';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};\n\n/**\r\n * 既存システムとの互換性を保つデータ形式に変換\r\n * @param {Array} webData - Web用のデータ\r\n * @returns {Array} 既存システム用のデータ\r\n */\nexport const convertToLegacyFormat = webData => {\n  return webData.map(item => ({\n    車種名: item.車種名,\n    モデル: '情報なし',\n    // 既存データに合わせる\n    グレード: item.元グレード,\n    正規グレード: item.正規グレード,\n    支払総額: item.支払総額,\n    年式: item.年式,\n    走行距離: item.走行距離,\n    修復歴: item.修復歴,\n    ミッション: item.ミッション,\n    排気量: item.排気量,\n    マッチング精度: item.マッチング精度,\n    取得日時: item.取得日時,\n    ソースURL: item.ソースURL || ''\n  }));\n};\n\n/**\r\n * データの品質チェック\r\n * @param {Array} data - チェックするデータ\r\n * @returns {Object} 品質レポート\r\n */\nexport const checkDataQuality = data => {\n  if (!data || data.length === 0) {\n    return {\n      totalCount: 0,\n      issues: ['データが存在しません']\n    };\n  }\n  const issues = [];\n  let validCount = 0;\n  let priceIssues = 0;\n  let yearIssues = 0;\n  let mileageIssues = 0;\n  data.forEach((item, index) => {\n    let hasIssue = false;\n    if (!item.price || item.price <= 0) {\n      priceIssues++;\n      hasIssue = true;\n    }\n    if (!item.year || item.year < 2010 || item.year > new Date().getFullYear() + 1) {\n      yearIssues++;\n      hasIssue = true;\n    }\n    if (!item.mileage || item.mileage < 0) {\n      mileageIssues++;\n      hasIssue = true;\n    }\n    if (!hasIssue) validCount++;\n  });\n  if (priceIssues > 0) issues.push(`価格データに問題: ${priceIssues}件`);\n  if (yearIssues > 0) issues.push(`年式データに問題: ${yearIssues}件`);\n  if (mileageIssues > 0) issues.push(`走行距離データに問題: ${mileageIssues}件`);\n  const qualityScore = data.length > 0 ? validCount / data.length * 100 : 0;\n  return {\n    totalCount: data.length,\n    validCount: validCount,\n    qualityScore: Math.round(qualityScore * 10) / 10,\n    issues: issues.length > 0 ? issues : ['データ品質に問題はありません']\n  };\n};","map":{"version":3,"names":["parsePrice","priceStr","match","parseFloat","parseYear","yearStr","parseInt","parseMileage","mileageStr","includes","parseDisplacement","displacementStr","processCarData","rawData","map","row","index","price","支払総額","year","年式","mileage","走行距離","displacement","排気量","normalizedGrade","正規グレード","グレード","date","取得日時","randomMonth","Math","floor","random","randomDay","String","padStart","id","車種名","元グレード","修復歴","ミッション","マッチング精度","pricePerCC","ageInYears","Date","getFullYear","mileagePerYear","max","filter","item","normalizeGradeName","gradeName","rcfPatterns","pattern","normalized","test","cleaned","replace","trim","calculatePriceStats","prices","length","mean","min","median","count","validPrices","p","isNaN","sorted","sort","a","b","reduce","sum","round","exportToCSV","data","filename","headers","Object","keys","csvContent","join","header","value","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","convertToLegacyFormat","webData","モデル","ソースURL","checkDataQuality","totalCount","issues","validCount","priceIssues","yearIssues","mileageIssues","forEach","hasIssue","push","qualityScore"],"sources":["C:/Users/PC_User/car-analysis-system/web-dashboard/src/utils/dataProcessor.js"],"sourcesContent":["/**\r\n * データ処理ユーティリティ\r\n * 既存のPythonシステムとの連携を考慮\r\n */\r\n\r\n/**\r\n * 価格文字列から数値を抽出\r\n * @param {string} priceStr - \"659.9万円\" 形式の文字列\r\n * @returns {number|null} 数値または null\r\n */\r\nexport const parsePrice = (priceStr) => {\r\n  if (!priceStr) return null;\r\n  const match = priceStr.match(/([0-9.]+)万円/);\r\n  return match ? parseFloat(match[1]) : null;\r\n};\r\n\r\n/**\r\n * 年式文字列から年を抽出\r\n * @param {string} yearStr - \"2019(R01)\" 形式の文字列\r\n * @returns {number|null} 年または null\r\n */\r\nexport const parseYear = (yearStr) => {\r\n  if (!yearStr) return null;\r\n  const match = yearStr.match(/(\\d{4})/);\r\n  return match ? parseInt(match[1]) : null;\r\n};\r\n\r\n/**\r\n * 走行距離文字列から数値を抽出（km単位）\r\n * @param {string} mileageStr - \"5.3万km\" 形式の文字列\r\n * @returns {number|null} 走行距離（km）または null\r\n */\r\nexport const parseMileage = (mileageStr) => {\r\n  if (!mileageStr) return null;\r\n  \r\n  if (mileageStr.includes('万km')) {\r\n    const match = mileageStr.match(/([0-9.]+)万km/);\r\n    return match ? parseFloat(match[1]) * 10000 : null;\r\n  } else if (mileageStr.includes('km')) {\r\n    const match = mileageStr.match(/([0-9.]+)km/);\r\n    return match ? parseFloat(match[1]) : null;\r\n  }\r\n  \r\n  return null;\r\n};\r\n\r\n/**\r\n * 排気量文字列から数値を抽出\r\n * @param {string} displacementStr - \"5000CC\" 形式の文字列\r\n * @returns {number|null} 排気量（CC）または null\r\n */\r\nexport const parseDisplacement = (displacementStr) => {\r\n  if (!displacementStr) return null;\r\n  const match = displacementStr.match(/(\\d+)CC/);\r\n  return match ? parseInt(match[1]) : null;\r\n};\r\n\r\n/**\r\n * CSVデータを分析用に変換\r\n * @param {Array} rawData - CSVから読み込んだ生データ\r\n * @returns {Array} 変換済みデータ\r\n */\r\nexport const processCarData = (rawData) => {\r\n  return rawData.map((row, index) => {\r\n    const price = parsePrice(row.支払総額);\r\n    const year = parseYear(row.年式);\r\n    const mileage = parseMileage(row.走行距離);\r\n    const displacement = parseDisplacement(row.排気量);\r\n    \r\n    // 正規グレードが存在しない場合は元グレードを使用\r\n    const normalizedGrade = row.正規グレード || row.グレード || '';\r\n    \r\n    // 日付の処理\r\n    let date = row.取得日時;\r\n    if (!date) {\r\n      // フォールバック: ランダムな日付を生成\r\n      const randomMonth = Math.floor(Math.random() * 12) + 1;\r\n      const randomDay = Math.floor(Math.random() * 28) + 1;\r\n      date = `2024-${String(randomMonth).padStart(2, '0')}-${String(randomDay).padStart(2, '0')}`;\r\n    }\r\n    \r\n    return {\r\n      id: index,\r\n      車種名: row.車種名 || 'Unknown',\r\n      元グレード: row.グレード || '',\r\n      正規グレード: normalizedGrade,\r\n      支払総額: row.支払総額 || '',\r\n      price: price,\r\n      年式: row.年式 || '',\r\n      year: year,\r\n      走行距離: row.走行距離 || '',\r\n      mileage: mileage,\r\n      修復歴: row.修復歴 || 'なし',\r\n      ミッション: row.ミッション || '',\r\n      排気量: row.排気量 || '',\r\n      displacement: displacement,\r\n      マッチング精度: parseFloat(row.マッチング精度) || 0.8,\r\n      取得日時: row.取得日時 || '',\r\n      date: date,\r\n      // 追加の分析用フィールド\r\n      pricePerCC: price && displacement ? (price * 10000) / displacement : null,\r\n      ageInYears: year ? (new Date().getFullYear() - year) : null,\r\n      mileagePerYear: year && mileage ? mileage / Math.max(1, new Date().getFullYear() - year) : null\r\n    };\r\n  }).filter(item => \r\n    // 必須フィールドが存在するデータのみ\r\n    item.price !== null && \r\n    item.year !== null && \r\n    item.mileage !== null\r\n  );\r\n};\r\n\r\n/**\r\n * グレード名の正規化（簡易版）\r\n * @param {string} gradeName - 元のグレード名\r\n * @returns {string} 正規化されたグレード名\r\n */\r\nexport const normalizeGradeName = (gradeName) => {\r\n  if (!gradeName) return 'ベース';\r\n  \r\n  // RC Fの特殊パターン\r\n  const rcfPatterns = [\r\n    { pattern: /RC\\s+カーボンエクステリアパッケージ/i, normalized: 'カーボンエクステリア' },\r\n    { pattern: /RC\\s+パフォーマンスパッケージ/i, normalized: 'パフォーマンス' },\r\n    { pattern: /RC\\s+F\\s+10th\\s+アニバーサリー/i, normalized: '10th アニバーサリー' },\r\n    { pattern: /RC\\s+ファイナル\\s+エディション/i, normalized: 'ファイナル エディション' },\r\n    { pattern: /RC\\s+エモーショナル\\s+ツーリング/i, normalized: 'エモーショナル ツーリング' },\r\n    { pattern: /RC\\s+5\\.0/i, normalized: '5.0' }\r\n  ];\r\n  \r\n  for (const { pattern, normalized } of rcfPatterns) {\r\n    if (pattern.test(gradeName)) {\r\n      return normalized;\r\n    }\r\n  }\r\n  \r\n  // 一般的なパターン\r\n  const cleaned = gradeName\r\n    .replace(/^RC\\s+/i, '')\r\n    .replace(/[（）\\(\\)\\[\\]【】]/g, '')\r\n    .trim();\r\n  \r\n  return cleaned || 'ベース';\r\n};\r\n\r\n/**\r\n * 価格統計の計算\r\n * @param {Array} prices - 価格の配列\r\n * @returns {Object} 統計情報\r\n */\r\nexport const calculatePriceStats = (prices) => {\r\n  if (!prices || prices.length === 0) {\r\n    return { mean: 0, min: 0, max: 0, median: 0, count: 0 };\r\n  }\r\n  \r\n  const validPrices = prices.filter(p => p !== null && !isNaN(p));\r\n  if (validPrices.length === 0) {\r\n    return { mean: 0, min: 0, max: 0, median: 0, count: 0 };\r\n  }\r\n  \r\n  const sorted = [...validPrices].sort((a, b) => a - b);\r\n  const mean = validPrices.reduce((sum, p) => sum + p, 0) / validPrices.length;\r\n  const median = sorted.length % 2 === 0\r\n    ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\r\n    : sorted[Math.floor(sorted.length / 2)];\r\n  \r\n  return {\r\n    mean: Math.round(mean * 10) / 10,\r\n    min: Math.min(...validPrices),\r\n    max: Math.max(...validPrices),\r\n    median: Math.round(median * 10) / 10,\r\n    count: validPrices.length\r\n  };\r\n};\r\n\r\n/**\r\n * データをCSV形式でエクスポート\r\n * @param {Array} data - エクスポートするデータ\r\n * @param {string} filename - ファイル名\r\n */\r\nexport const exportToCSV = (data, filename = 'car_analysis_export.csv') => {\r\n  if (!data || data.length === 0) return;\r\n  \r\n  const headers = Object.keys(data[0]);\r\n  const csvContent = [\r\n    headers.join(','),\r\n    ...data.map(row => \r\n      headers.map(header => {\r\n        const value = row[header];\r\n        // カンマやダブルクォートを含む場合はエスケープ\r\n        if (typeof value === 'string' && (value.includes(',') || value.includes('\"'))) {\r\n          return `\"${value.replace(/\"/g, '\"\"')}\"`;\r\n        }\r\n        return value;\r\n      }).join(',')\r\n    )\r\n  ].join('\\n');\r\n  \r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const link = document.createElement('a');\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', filename);\r\n  link.style.visibility = 'hidden';\r\n  \r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\n/**\r\n * 既存システムとの互換性を保つデータ形式に変換\r\n * @param {Array} webData - Web用のデータ\r\n * @returns {Array} 既存システム用のデータ\r\n */\r\nexport const convertToLegacyFormat = (webData) => {\r\n  return webData.map(item => ({\r\n    車種名: item.車種名,\r\n    モデル: '情報なし', // 既存データに合わせる\r\n    グレード: item.元グレード,\r\n    正規グレード: item.正規グレード,\r\n    支払総額: item.支払総額,\r\n    年式: item.年式,\r\n    走行距離: item.走行距離,\r\n    修復歴: item.修復歴,\r\n    ミッション: item.ミッション,\r\n    排気量: item.排気量,\r\n    マッチング精度: item.マッチング精度,\r\n    取得日時: item.取得日時,\r\n    ソースURL: item.ソースURL || ''\r\n  }));\r\n};\r\n\r\n/**\r\n * データの品質チェック\r\n * @param {Array} data - チェックするデータ\r\n * @returns {Object} 品質レポート\r\n */\r\nexport const checkDataQuality = (data) => {\r\n  if (!data || data.length === 0) {\r\n    return { totalCount: 0, issues: ['データが存在しません'] };\r\n  }\r\n  \r\n  const issues = [];\r\n  let validCount = 0;\r\n  let priceIssues = 0;\r\n  let yearIssues = 0;\r\n  let mileageIssues = 0;\r\n  \r\n  data.forEach((item, index) => {\r\n    let hasIssue = false;\r\n    \r\n    if (!item.price || item.price <= 0) {\r\n      priceIssues++;\r\n      hasIssue = true;\r\n    }\r\n    \r\n    if (!item.year || item.year < 2010 || item.year > new Date().getFullYear() + 1) {\r\n      yearIssues++;\r\n      hasIssue = true;\r\n    }\r\n    \r\n    if (!item.mileage || item.mileage < 0) {\r\n      mileageIssues++;\r\n      hasIssue = true;\r\n    }\r\n    \r\n    if (!hasIssue) validCount++;\r\n  });\r\n  \r\n  if (priceIssues > 0) issues.push(`価格データに問題: ${priceIssues}件`);\r\n  if (yearIssues > 0) issues.push(`年式データに問題: ${yearIssues}件`);\r\n  if (mileageIssues > 0) issues.push(`走行距離データに問題: ${mileageIssues}件`);\r\n  \r\n  const qualityScore = data.length > 0 ? (validCount / data.length) * 100 : 0;\r\n  \r\n  return {\r\n    totalCount: data.length,\r\n    validCount: validCount,\r\n    qualityScore: Math.round(qualityScore * 10) / 10,\r\n    issues: issues.length > 0 ? issues : ['データ品質に問題はありません']\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}