{"ast":null,"code":"/**\n * データ処理ユーティリティ（修正版）\n * 価格の型変換バグとミッション分類を修正\n */\n\n/**\n * 価格文字列から数値を抽出（型安全版）\n * @param {string|number} priceStr - \"659.9万円\" 形式の文字列または数値\n * @returns {number|null} 数値または null\n */\nexport const parsePrice = priceStr => {\n  // 既に数値の場合\n  if (typeof priceStr === 'number') {\n    return priceStr;\n  }\n  if (!priceStr || typeof priceStr !== 'string') return null;\n\n  // \"659.9万円\" -> 659.9\n  const match = priceStr.match(/([0-9.]+)万円/);\n  if (match) {\n    const price = parseFloat(match[1]);\n    // 価格範囲チェック（10万円～3000万円の範囲内）\n    if (price >= 10 && price <= 3000) {\n      return price;\n    }\n  }\n  return null;\n};\n\n/**\n * 年式文字列から年を抽出\n * @param {string|number} yearStr - \"2019(R01)\" 形式の文字列または数値\n * @returns {number|null} 年または null\n */\nexport const parseYear = yearStr => {\n  // 既に数値の場合\n  if (typeof yearStr === 'number') {\n    return yearStr >= 2010 && yearStr <= 2026 ? yearStr : null;\n  }\n  if (!yearStr) return null;\n  const match = String(yearStr).match(/(\\d{4})/);\n  if (match) {\n    const year = parseInt(match[1]);\n    // 年式範囲チェック（2010-2026年の範囲内）\n    return year >= 2010 && year <= 2026 ? year : null;\n  }\n  return null;\n};\n\n/**\n * 走行距離文字列から数値を抽出（km単位）\n * @param {string|number} mileageStr - \"5.3万km\" 形式の文字列または数値\n * @returns {number|null} 走行距離（km）または null\n */\nexport const parseMileage = mileageStr => {\n  // 既に数値の場合\n  if (typeof mileageStr === 'number') {\n    return mileageStr >= 0 ? mileageStr : null;\n  }\n  if (!mileageStr) return null;\n  const str = String(mileageStr);\n  if (str.includes('万km')) {\n    const match = str.match(/([0-9.]+)万km/);\n    if (match) {\n      const mileage = parseFloat(match[1]) * 10000;\n      return mileage >= 0 ? mileage : null;\n    }\n  } else if (str.includes('km')) {\n    const match = str.match(/([0-9.]+)km/);\n    if (match) {\n      const mileage = parseFloat(match[1]);\n      return mileage >= 0 ? mileage : null;\n    }\n  }\n  return null;\n};\n\n/**\n * 日付文字列を正規化\n * @param {string} dateStr - 日付文字列\n * @returns {string} YYYY-MM-DD形式の日付文字列\n */\nexport const parseDate = dateStr => {\n  if (!dateStr) {\n    // フォールバック: 2025年の日付を生成\n    const month = Math.floor(Math.random() * 6) + 1; // 1-6月\n    const day = Math.floor(Math.random() * 28) + 1;\n    return `2025-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n  }\n\n  // ISODateTime形式の場合、日付部分のみ抽出\n  if (dateStr.includes('T')) {\n    return dateStr.split('T')[0];\n  }\n\n  // YYYY-MM-DD形式の場合はそのまま\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateStr)) {\n    return dateStr;\n  }\n\n  // その他の形式の場合は現在日付を使用\n  return new Date().toISOString().split('T')[0];\n};\n\n/**\n * ミッション情報を4つのカテゴリに分類\n * @param {string} transmission - ミッション情報\n * @returns {string} カテゴリ ('AT', 'CVT', 'MT', 'other')\n */\nexport const categorizeTransmission = transmission => {\n  if (!transmission || typeof transmission !== 'string') {\n    return 'other';\n  }\n  const trans = transmission.toLowerCase();\n\n  // CVT優先判定（ATとCVTが混在する場合）\n  if (trans.includes('cvt')) {\n    return 'CVT';\n  }\n\n  // MT判定\n  if (trans.includes('mt') || trans.includes('マニュアル') || trans.includes('manual')) {\n    return 'MT';\n  }\n\n  // AT判定\n  if (trans.includes('at') || trans.includes('オートマ') || trans.includes('automatic')) {\n    return 'AT';\n  }\n  return 'other';\n};\n\n/**\n * 排気量文字列から数値を抽出\n * @param {string} displacementStr - \"5000CC\" 形式の文字列\n * @returns {number|null} 排気量（CC）または null\n */\nexport const parseDisplacement = displacementStr => {\n  if (!displacementStr) return null;\n  const match = String(displacementStr).match(/(\\d+)CC/);\n  return match ? parseInt(match[1]) : null;\n};\n\n/**\n * グレード名の正規化（簡易版）\n * @param {string} gradeName - 元のグレード名\n * @returns {string} 正規化されたグレード名\n */\n\n/**\n * CSVデータを分析用に変換（修正版）\n * @param {Array} rawData - CSVから読み込んだ生データ\n * @returns {Array} 変換済みデータ\n */\nexport const processCarData = rawData => {\n  if (!Array.isArray(rawData)) {\n    console.warn('processCarData: rawDataが配列ではありません');\n    return [];\n  }\n  return rawData.map((row, index) => {\n    try {\n      const price = parsePrice(row.支払総額);\n      const year = parseYear(row.年式);\n      const mileage = parseMileage(row.走行距離);\n      const displacement = parseDisplacement(row.排気量);\n\n      // 正規グレードが存在しない場合は元グレードを使用\n      // JSONファイルから読み込んだグレードをクレンジング\n      const normalizedGrade = normalizeGradeName(row.正規グレード || row.グレード || '');\n\n      // 日付の処理（修正版）\n      const date = parseDate(row.取得日時);\n\n      // マッチング精度の処理\n      let processedMatchingScore = 0.8; // デフォルト値\n      if (row.マッチング精度) {\n        const score = parseFloat(row.マッチング精度);\n        if (!isNaN(score) && score >= 0 && score <= 1) {\n          processedMatchingScore = score;\n        }\n      }\n      return {\n        id: index,\n        車種名: row.車種名 || 'Unknown',\n        元グレード: row.グレード || '',\n        正規グレード: normalizedGrade,\n        支払総額: row.支払総額 || '',\n        price: price,\n        年式: row.年式 || '',\n        year: year,\n        走行距離: row.走行距離 || '',\n        mileage: mileage,\n        修復歴: row.修復歴 || 'なし',\n        ミッション: row.ミッション || '',\n        排気量: row.排気量 || '',\n        displacement: displacement,\n        マッチング精度: processedMatchingScore,\n        取得日時: row.取得日時 || '',\n        date: date,\n        ソースURL: row.ソースURL || '',\n        車両URL: row.車両URL || row.ソースURL || '',\n        // 車両個別URLを追加\n        // 追加の分析用フィールド\n        pricePerCC: price && displacement ? price * 10000 / displacement : null,\n        ageInYears: year ? new Date().getFullYear() - year : null,\n        mileagePerYear: year && mileage ? mileage / Math.max(1, new Date().getFullYear() - year) : null\n      };\n    } catch (error) {\n      console.warn(`processCarData: 行${index}の処理でエラー:`, error, row);\n      return null;\n    }\n  }).filter(item =>\n  // 必須フィールドが存在し、有効なデータのみ\n  item !== null && item.price !== null && item.year !== null && item.mileage !== null && item.price > 0 && item.mileage >= 0);\n};\n\n/**\n * グレード名の正規化（簡易版）\n * @param {string} gradeName - 元のグレード名\n * @returns {string} 正規化されたグレード名\n */\nexport const normalizeGradeName = gradeName => {\n  if (!gradeName) return 'ベース';\n\n  // RC Fの特殊パターン\n  const rcfPatterns = [{\n    pattern: /RC\\s+カーボンエクステリアパッケージ/i,\n    normalized: 'カーボンエクステリア'\n  }, {\n    pattern: /RC\\s+パフォーマンスパッケージ/i,\n    normalized: 'パフォーマンス'\n  }, {\n    pattern: /RC\\s+F\\s+10th\\s+アニバーサリー/i,\n    normalized: '10th アニバーサリー'\n  }, {\n    pattern: /RC\\s+ファイナル\\s+エディション/i,\n    normalized: 'ファイナル エディション'\n  }, {\n    pattern: /RC\\s+エモーショナル\\s+ツーリング/i,\n    normalized: 'エモーショナル ツーリング'\n  }, {\n    pattern: /RC\\s+5\\.0/i,\n    normalized: '5.0'\n  }];\n  for (const {\n    pattern,\n    normalized\n  } of rcfPatterns) {\n    if (pattern.test(gradeName)) {\n      return normalized;\n    }\n  }\n\n  // 一般的なパターン\n  const cleaned = gradeName.replace(/^RC\\s+/i, '').replace(/[（）()[\\]【】]/g, '').trim();\n  return cleaned || 'ベース';\n};\n\n/**\n * 価格統計の計算（修正版）\n * @param {Array} prices - 価格の配列\n * @returns {Object} 統計情報\n */\nexport const calculatePriceStats = prices => {\n  if (!Array.isArray(prices) || prices.length === 0) {\n    return {\n      mean: 0,\n      min: 0,\n      max: 0,\n      median: 0,\n      count: 0\n    };\n  }\n  const validPrices = prices.filter(p => p !== null && p !== undefined && !isNaN(p) && typeof p === 'number' && p > 0);\n  if (validPrices.length === 0) {\n    return {\n      mean: 0,\n      min: 0,\n      max: 0,\n      median: 0,\n      count: 0\n    };\n  }\n  const sorted = [...validPrices].sort((a, b) => a - b);\n  const mean = validPrices.reduce((sum, p) => sum + p, 0) / validPrices.length;\n  const median = sorted.length % 2 === 0 ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2 : sorted[Math.floor(sorted.length / 2)];\n  return {\n    mean: Math.round(mean * 10) / 10,\n    min: Math.min(...validPrices),\n    max: Math.max(...validPrices),\n    median: Math.round(median * 10) / 10,\n    count: validPrices.length\n  };\n};\n\n/**\n * データをCSV形式でエクスポート（BOM付きUTF-8対応）\n * @param {Array} data - エクスポートするデータ\n * @param {string} filename - ファイル名\n */\nexport const exportToCSV = (data, filename = 'car_analysis_export.csv') => {\n  if (!data || data.length === 0) {\n    console.warn('exportToCSV: エクスポートするデータがありません');\n    return;\n  }\n  try {\n    const headers = Object.keys(data[0]);\n    const csvContent = [headers.join(','), ...data.map(row => headers.map(header => {\n      const value = row[header];\n      // null/undefinedの場合は空文字\n      if (value === null || value === undefined) {\n        return '';\n      }\n      // カンマやダブルクォートを含む場合はエスケープ\n      const stringValue = String(value);\n      if (stringValue.includes(',') || stringValue.includes('\"') || stringValue.includes('\\n')) {\n        return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n      }\n      return stringValue;\n    }).join(','))].join('\\n');\n\n    // BOM付きUTF-8でエクスポート（Excel対応）\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    // URLを解放\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('exportToCSV: エクスポートエラー:', error);\n    alert('CSVエクスポートに失敗しました。');\n  }\n};\n\n/**\n * 既存システムとの互換性を保つデータ形式に変換\n * @param {Array} webData - Web用のデータ\n * @returns {Array} 既存システム用のデータ\n */\nexport const convertToLegacyFormat = webData => {\n  if (!Array.isArray(webData)) {\n    return [];\n  }\n  return webData.map(item => ({\n    車種名: item.車種名 || '',\n    モデル: '情報なし',\n    // 既存データに合わせる\n    グレード: item.元グレード || '',\n    正規グレード: item.正規グレード || '',\n    支払総額: item.支払総額 || '',\n    年式: item.年式 || '',\n    走行距離: item.走行距離 || '',\n    修復歴: item.修復歴 || 'なし',\n    ミッション: item.ミッション || '',\n    排気量: item.排気量 || '',\n    マッチング精度: item.マッチング精度 || 0.8,\n    取得日時: item.取得日時 || '',\n    ソースURL: item.ソースURL || '',\n    車両URL: item.車両URL || '' // 車両個別URLを追加\n  }));\n};\n\n/**\n * データの品質チェック（強化版）\n * @param {Array} data - チェックするデータ\n * @returns {Object} 品質レポート\n */\nexport const checkDataQuality = data => {\n  if (!Array.isArray(data) || data.length === 0) {\n    return {\n      totalCount: 0,\n      validCount: 0,\n      qualityScore: 0,\n      issues: ['データが存在しません']\n    };\n  }\n  const issues = [];\n  let validCount = 0;\n  let priceIssues = 0;\n  let yearIssues = 0;\n  let mileageIssues = 0;\n  let gradeIssues = 0;\n  data.forEach((item, index) => {\n    let hasIssue = false;\n\n    // 価格チェック\n    if (!item.price || typeof item.price !== 'number' || item.price <= 0) {\n      priceIssues++;\n      hasIssue = true;\n    }\n\n    // 年式チェック  \n    if (!item.year || typeof item.year !== 'number' || item.year < 2010 || item.year > 2026) {\n      yearIssues++;\n      hasIssue = true;\n    }\n\n    // 走行距離チェック\n    if (item.mileage === null || item.mileage === undefined || typeof item.mileage !== 'number' || item.mileage < 0) {\n      mileageIssues++;\n      hasIssue = true;\n    }\n\n    // グレードチェック\n    if (!item.正規グレード && !item.元グレード) {\n      gradeIssues++;\n      hasIssue = true;\n    }\n    if (!hasIssue) validCount++;\n  });\n  if (priceIssues > 0) issues.push(`価格データに問題: ${priceIssues}件`);\n  if (yearIssues > 0) issues.push(`年式データに問題: ${yearIssues}件`);\n  if (mileageIssues > 0) issues.push(`走行距離データに問題: ${mileageIssues}件`);\n  if (gradeIssues > 0) issues.push(`グレードデータに問題: ${gradeIssues}件`);\n  const qualityScore = data.length > 0 ? validCount / data.length * 100 : 0;\n  return {\n    totalCount: data.length,\n    validCount: validCount,\n    qualityScore: Math.round(qualityScore * 10) / 10,\n    issues: issues.length > 0 ? issues : ['データ品質に問題はありません'],\n    details: {\n      priceIssues,\n      yearIssues,\n      mileageIssues,\n      gradeIssues\n    }\n  };\n};","map":{"version":3,"names":["parsePrice","priceStr","match","price","parseFloat","parseYear","yearStr","String","year","parseInt","parseMileage","mileageStr","str","includes","mileage","parseDate","dateStr","month","Math","floor","random","day","padStart","split","test","Date","toISOString","categorizeTransmission","transmission","trans","toLowerCase","parseDisplacement","displacementStr","processCarData","rawData","Array","isArray","console","warn","map","row","index","支払総額","年式","走行距離","displacement","排気量","normalizedGrade","normalizeGradeName","正規グレード","グレード","date","取得日時","processedMatchingScore","マッチング精度","score","isNaN","id","車種名","元グレード","修復歴","ミッション","ソースURL","車両URL","pricePerCC","ageInYears","getFullYear","mileagePerYear","max","error","filter","item","gradeName","rcfPatterns","pattern","normalized","cleaned","replace","trim","calculatePriceStats","prices","length","mean","min","median","count","validPrices","p","undefined","sorted","sort","a","b","reduce","sum","round","exportToCSV","data","filename","headers","Object","keys","csvContent","join","header","value","stringValue","BOM","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","click","removeChild","revokeObjectURL","alert","convertToLegacyFormat","webData","モデル","checkDataQuality","totalCount","validCount","qualityScore","issues","priceIssues","yearIssues","mileageIssues","gradeIssues","forEach","hasIssue","push","details"],"sources":["C:/Users/PC_User/car-analysis-system/carsensor-2/web-dashboard/src/utils/dataProcessor.js"],"sourcesContent":["/**\n * データ処理ユーティリティ（修正版）\n * 価格の型変換バグとミッション分類を修正\n */\n\n/**\n * 価格文字列から数値を抽出（型安全版）\n * @param {string|number} priceStr - \"659.9万円\" 形式の文字列または数値\n * @returns {number|null} 数値または null\n */\nexport const parsePrice = (priceStr) => {\n  // 既に数値の場合\n  if (typeof priceStr === 'number') {\n    return priceStr;\n  }\n  \n  if (!priceStr || typeof priceStr !== 'string') return null;\n  \n  // \"659.9万円\" -> 659.9\n  const match = priceStr.match(/([0-9.]+)万円/);\n  if (match) {\n    const price = parseFloat(match[1]);\n    // 価格範囲チェック（10万円～3000万円の範囲内）\n    if (price >= 10 && price <= 3000) {\n      return price;\n    }\n  }\n  \n  return null;\n};\n\n/**\n * 年式文字列から年を抽出\n * @param {string|number} yearStr - \"2019(R01)\" 形式の文字列または数値\n * @returns {number|null} 年または null\n */\nexport const parseYear = (yearStr) => {\n  // 既に数値の場合\n  if (typeof yearStr === 'number') {\n    return yearStr >= 2010 && yearStr <= 2026 ? yearStr : null;\n  }\n  \n  if (!yearStr) return null;\n  \n  const match = String(yearStr).match(/(\\d{4})/);\n  if (match) {\n    const year = parseInt(match[1]);\n    // 年式範囲チェック（2010-2026年の範囲内）\n    return year >= 2010 && year <= 2026 ? year : null;\n  }\n  \n  return null;\n};\n\n/**\n * 走行距離文字列から数値を抽出（km単位）\n * @param {string|number} mileageStr - \"5.3万km\" 形式の文字列または数値\n * @returns {number|null} 走行距離（km）または null\n */\nexport const parseMileage = (mileageStr) => {\n  // 既に数値の場合\n  if (typeof mileageStr === 'number') {\n    return mileageStr >= 0 ? mileageStr : null;\n  }\n  \n  if (!mileageStr) return null;\n  \n  const str = String(mileageStr);\n  \n  if (str.includes('万km')) {\n    const match = str.match(/([0-9.]+)万km/);\n    if (match) {\n      const mileage = parseFloat(match[1]) * 10000;\n      return mileage >= 0 ? mileage : null;\n    }\n  } else if (str.includes('km')) {\n    const match = str.match(/([0-9.]+)km/);\n    if (match) {\n      const mileage = parseFloat(match[1]);\n      return mileage >= 0 ? mileage : null;\n    }\n  }\n  \n  return null;\n};\n\n/**\n * 日付文字列を正規化\n * @param {string} dateStr - 日付文字列\n * @returns {string} YYYY-MM-DD形式の日付文字列\n */\nexport const parseDate = (dateStr) => {\n  if (!dateStr) {\n    // フォールバック: 2025年の日付を生成\n    const month = Math.floor(Math.random() * 6) + 1; // 1-6月\n    const day = Math.floor(Math.random() * 28) + 1;\n    return `2025-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n  }\n  \n  // ISODateTime形式の場合、日付部分のみ抽出\n  if (dateStr.includes('T')) {\n    return dateStr.split('T')[0];\n  }\n  \n  // YYYY-MM-DD形式の場合はそのまま\n  if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateStr)) {\n    return dateStr;\n  }\n  \n  // その他の形式の場合は現在日付を使用\n  return new Date().toISOString().split('T')[0];\n};\n\n/**\n * ミッション情報を4つのカテゴリに分類\n * @param {string} transmission - ミッション情報\n * @returns {string} カテゴリ ('AT', 'CVT', 'MT', 'other')\n */\nexport const categorizeTransmission = (transmission) => {\n  if (!transmission || typeof transmission !== 'string') {\n    return 'other';\n  }\n  \n  const trans = transmission.toLowerCase();\n  \n  // CVT優先判定（ATとCVTが混在する場合）\n  if (trans.includes('cvt')) {\n    return 'CVT';\n  }\n  \n  // MT判定\n  if (trans.includes('mt') || trans.includes('マニュアル') || trans.includes('manual')) {\n    return 'MT';\n  }\n  \n  // AT判定\n  if (trans.includes('at') || trans.includes('オートマ') || trans.includes('automatic')) {\n    return 'AT';\n  }\n  \n  return 'other';\n};\n\n/**\n * 排気量文字列から数値を抽出\n * @param {string} displacementStr - \"5000CC\" 形式の文字列\n * @returns {number|null} 排気量（CC）または null\n */\nexport const parseDisplacement = (displacementStr) => {\n  if (!displacementStr) return null;\n  const match = String(displacementStr).match(/(\\d+)CC/);\n  return match ? parseInt(match[1]) : null;\n};\n\n/**\n * グレード名の正規化（簡易版）\n * @param {string} gradeName - 元のグレード名\n * @returns {string} 正規化されたグレード名\n */\n\n/**\n * CSVデータを分析用に変換（修正版）\n * @param {Array} rawData - CSVから読み込んだ生データ\n * @returns {Array} 変換済みデータ\n */\nexport const processCarData = (rawData) => {\n  if (!Array.isArray(rawData)) {\n    console.warn('processCarData: rawDataが配列ではありません');\n    return [];\n  }\n  \n  return rawData.map((row, index) => {\n    try {\n      const price = parsePrice(row.支払総額);\n      const year = parseYear(row.年式);\n      const mileage = parseMileage(row.走行距離);\n      const displacement = parseDisplacement(row.排気量);\n      \n      // 正規グレードが存在しない場合は元グレードを使用\n      // JSONファイルから読み込んだグレードをクレンジング\n      const normalizedGrade = normalizeGradeName(\n        row.正規グレード || row.グレード || ''\n      );\n      \n      // 日付の処理（修正版）\n      const date = parseDate(row.取得日時);\n      \n      // マッチング精度の処理\n      let processedMatchingScore = 0.8; // デフォルト値\n      if (row.マッチング精度) {\n        const score = parseFloat(row.マッチング精度);\n        if (!isNaN(score) && score >= 0 && score <= 1) {\n          processedMatchingScore = score;\n        }\n      }\n      \n      return {\n        id: index,\n        車種名: row.車種名 || 'Unknown',\n        元グレード: row.グレード || '',\n        正規グレード: normalizedGrade,\n        支払総額: row.支払総額 || '',\n        price: price,\n        年式: row.年式 || '',\n        year: year,\n        走行距離: row.走行距離 || '',\n        mileage: mileage,\n        修復歴: row.修復歴 || 'なし',\n        ミッション: row.ミッション || '',\n        排気量: row.排気量 || '',\n        displacement: displacement,\n        マッチング精度: processedMatchingScore,\n        取得日時: row.取得日時 || '',\n        date: date,\n        ソースURL: row.ソースURL || '',\n        車両URL: row.車両URL || row.ソースURL || '', // 車両個別URLを追加\n        // 追加の分析用フィールド\n        pricePerCC: price && displacement ? (price * 10000) / displacement : null,\n        ageInYears: year ? (new Date().getFullYear() - year) : null,\n        mileagePerYear: year && mileage ? mileage / Math.max(1, new Date().getFullYear() - year) : null\n      };\n    } catch (error) {\n      console.warn(`processCarData: 行${index}の処理でエラー:`, error, row);\n      return null;\n    }\n  }).filter(item => \n    // 必須フィールドが存在し、有効なデータのみ\n    item !== null && \n    item.price !== null && \n    item.year !== null && \n    item.mileage !== null &&\n    item.price > 0 &&\n    item.mileage >= 0\n  );\n};\n\n/**\n * グレード名の正規化（簡易版）\n * @param {string} gradeName - 元のグレード名\n * @returns {string} 正規化されたグレード名\n */\nexport const normalizeGradeName = (gradeName) => {\n  if (!gradeName) return 'ベース';\n  \n  // RC Fの特殊パターン\n  const rcfPatterns = [\n    { pattern: /RC\\s+カーボンエクステリアパッケージ/i, normalized: 'カーボンエクステリア' },\n    { pattern: /RC\\s+パフォーマンスパッケージ/i, normalized: 'パフォーマンス' },\n    { pattern: /RC\\s+F\\s+10th\\s+アニバーサリー/i, normalized: '10th アニバーサリー' },\n    { pattern: /RC\\s+ファイナル\\s+エディション/i, normalized: 'ファイナル エディション' },\n    { pattern: /RC\\s+エモーショナル\\s+ツーリング/i, normalized: 'エモーショナル ツーリング' },\n    { pattern: /RC\\s+5\\.0/i, normalized: '5.0' }\n  ];\n  \n  for (const { pattern, normalized } of rcfPatterns) {\n    if (pattern.test(gradeName)) {\n      return normalized;\n    }\n  }\n  \n  // 一般的なパターン\n  const cleaned = gradeName\n    .replace(/^RC\\s+/i, '')\n    .replace(/[（）()[\\]【】]/g, '')\n    .trim();\n  \n  return cleaned || 'ベース';\n};\n\n/**\n * 価格統計の計算（修正版）\n * @param {Array} prices - 価格の配列\n * @returns {Object} 統計情報\n */\nexport const calculatePriceStats = (prices) => {\n  if (!Array.isArray(prices) || prices.length === 0) {\n    return { mean: 0, min: 0, max: 0, median: 0, count: 0 };\n  }\n  \n  const validPrices = prices.filter(p => \n    p !== null && \n    p !== undefined && \n    !isNaN(p) && \n    typeof p === 'number' && \n    p > 0\n  );\n  \n  if (validPrices.length === 0) {\n    return { mean: 0, min: 0, max: 0, median: 0, count: 0 };\n  }\n  \n  const sorted = [...validPrices].sort((a, b) => a - b);\n  const mean = validPrices.reduce((sum, p) => sum + p, 0) / validPrices.length;\n  const median = sorted.length % 2 === 0\n    ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2\n    : sorted[Math.floor(sorted.length / 2)];\n  \n  return {\n    mean: Math.round(mean * 10) / 10,\n    min: Math.min(...validPrices),\n    max: Math.max(...validPrices),\n    median: Math.round(median * 10) / 10,\n    count: validPrices.length\n  };\n};\n\n/**\n * データをCSV形式でエクスポート（BOM付きUTF-8対応）\n * @param {Array} data - エクスポートするデータ\n * @param {string} filename - ファイル名\n */\nexport const exportToCSV = (data, filename = 'car_analysis_export.csv') => {\n  if (!data || data.length === 0) {\n    console.warn('exportToCSV: エクスポートするデータがありません');\n    return;\n  }\n  \n  try {\n    const headers = Object.keys(data[0]);\n    const csvContent = [\n      headers.join(','),\n      ...data.map(row => \n        headers.map(header => {\n          const value = row[header];\n          // null/undefinedの場合は空文字\n          if (value === null || value === undefined) {\n            return '';\n          }\n          // カンマやダブルクォートを含む場合はエスケープ\n          const stringValue = String(value);\n          if (stringValue.includes(',') || stringValue.includes('\"') || stringValue.includes('\\n')) {\n            return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\n          }\n          return stringValue;\n        }).join(',')\n      )\n    ].join('\\n');\n    \n    // BOM付きUTF-8でエクスポート（Excel対応）\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    \n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    // URLを解放\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('exportToCSV: エクスポートエラー:', error);\n    alert('CSVエクスポートに失敗しました。');\n  }\n};\n\n/**\n * 既存システムとの互換性を保つデータ形式に変換\n * @param {Array} webData - Web用のデータ\n * @returns {Array} 既存システム用のデータ\n */\nexport const convertToLegacyFormat = (webData) => {\n  if (!Array.isArray(webData)) {\n    return [];\n  }\n  \n  return webData.map(item => ({\n    車種名: item.車種名 || '',\n    モデル: '情報なし', // 既存データに合わせる\n    グレード: item.元グレード || '',\n    正規グレード: item.正規グレード || '',\n    支払総額: item.支払総額 || '',\n    年式: item.年式 || '',\n    走行距離: item.走行距離 || '',\n    修復歴: item.修復歴 || 'なし',\n    ミッション: item.ミッション || '',\n    排気量: item.排気量 || '',\n    マッチング精度: item.マッチング精度 || 0.8,\n    取得日時: item.取得日時 || '',\n    ソースURL: item.ソースURL || '',\n    車両URL: item.車両URL || '' // 車両個別URLを追加\n  }));\n};\n\n/**\n * データの品質チェック（強化版）\n * @param {Array} data - チェックするデータ\n * @returns {Object} 品質レポート\n */\nexport const checkDataQuality = (data) => {\n  if (!Array.isArray(data) || data.length === 0) {\n    return { \n      totalCount: 0, \n      validCount: 0,\n      qualityScore: 0,\n      issues: ['データが存在しません'] \n    };\n  }\n  \n  const issues = [];\n  let validCount = 0;\n  let priceIssues = 0;\n  let yearIssues = 0;\n  let mileageIssues = 0;\n  let gradeIssues = 0;\n  \n  data.forEach((item, index) => {\n    let hasIssue = false;\n    \n    // 価格チェック\n    if (!item.price || typeof item.price !== 'number' || item.price <= 0) {\n      priceIssues++;\n      hasIssue = true;\n    }\n    \n    // 年式チェック  \n    if (!item.year || typeof item.year !== 'number' || item.year < 2010 || item.year > 2026) {\n      yearIssues++;\n      hasIssue = true;\n    }\n    \n    // 走行距離チェック\n    if (item.mileage === null || item.mileage === undefined || typeof item.mileage !== 'number' || item.mileage < 0) {\n      mileageIssues++;\n      hasIssue = true;\n    }\n    \n    // グレードチェック\n    if (!item.正規グレード && !item.元グレード) {\n      gradeIssues++;\n      hasIssue = true;\n    }\n    \n    if (!hasIssue) validCount++;\n  });\n  \n  if (priceIssues > 0) issues.push(`価格データに問題: ${priceIssues}件`);\n  if (yearIssues > 0) issues.push(`年式データに問題: ${yearIssues}件`);\n  if (mileageIssues > 0) issues.push(`走行距離データに問題: ${mileageIssues}件`);\n  if (gradeIssues > 0) issues.push(`グレードデータに問題: ${gradeIssues}件`);\n  \n  const qualityScore = data.length > 0 ? (validCount / data.length) * 100 : 0;\n  \n  return {\n    totalCount: data.length,\n    validCount: validCount,\n    qualityScore: Math.round(qualityScore * 10) / 10,\n    issues: issues.length > 0 ? issues : ['データ品質に問題はありません'],\n    details: {\n      priceIssues,\n      yearIssues,\n      mileageIssues,\n      gradeIssues\n    }\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}